{
	"name": "Lorikeet",
	"scopeName": "source.lk",
	"patterns": [
		{
			"include": "#line_comment"
		},
		{
			"include": "#string_literal"
		},
		{
			"comment": "Integer literal (decimal)",
			"name": "constant.numeric.integer.decimal.lorikeet",
			"match": "\\b[0-9][0-9_]*([ui](8|16|32|64|128|s|size))?\\b"
		},
		{
			"comment": "Boolean constant",
			"name": "constant.language.boolean.lorikeet",
			"match": "\\b(true|false)\\b"
		},
		{
			"comment": "Control keyword",
			"name": "keyword.control.lorikeet",
			"match": "\\b(else|if|return)\\b"
		},
		{
			"comment": "Keyword",
			"name": "keyword.other.lorikeet",
			"match": "\\b(let|fn|mut)\\b"
		},
		{
			"comment": "Miscellaneous operator",
			"name": "keyword.operator.misc.lorikeet",
			"match": "(\\|>|\\$\\b)"
		},
		{
			"comment": "Comparison operator",
			"name": "keyword.operator.comparison.lorikeet",
			"match": "(==|!=)"
		},
		{
			"comment": "Assignment operator",
			"name": "keyword.operator.assignment.lorikeet",
			"match": "(\\=)"
		},
		{
			"comment": "Arithmetic operator",
			"name": "keyword.operator.arithmetic.lorikeet",
			"match": "(\\!|\\+|-|/|\\*)"
		},
		{
			"comment": "Comparison operator (second group because of regex precedence)",
			"name": "keyword.operator.comparison.lorikeet",
			"match": "(<|>)"
		},
		{
			"comment": "Function call",
			"match": "\\b([A-Za-z][A-Za-z0-9_]*|_[A-Za-z0-9_]+)\\s*\\(",
			"captures": {
				"1": {
					"name": "entity.name.function.lorikeet"
				}
			}
		},
		{
			"comment": "Function call with type parameters",
			"begin": "\\b([A-Za-z][A-Za-z0-9_]*|_[A-Za-z0-9_]+)\\s*(::)(?=\\s*<.*>\\s*\\()",
			"end": "\\(",
			"captures": {
				"1": {
					"name": "entity.name.function.lorikeet"
				},
				"2": {
					"name": "keyword.operator.misc.lorikeet"
				}
			}
		},
		{
			"comment": "Function definition",
			"begin": "\\b(fn)\\s+([A-Za-z][A-Za-z0-9_]*|_[A-Za-z0-9_]+)",
			"end": "[\\{;]",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.fn.lorikeet"
				},
				"2": {
					"name": "entity.name.function.lorikeet"
				}
			},
			"patterns": [
				{
					"include": "#line_comment"
				},
				{
					"comment": "Function arguments",
					"match": "\bfn\b",
					"name": "keyword.other.fn.lorikeet"
				}
			]
		}
	],
	"repository": {
		"line_comment": {
			"comment": "Single-line comment",
			"name": "comment.line.double-slash.lorikeet",
			"begin": "//",
			"end": "$"
		},
		"escaped_character": {
			"name": "constant.character.escape.rust",
			"match": "\\\\(x[0-9A-Fa-f]{2}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)"
		},
		"string_literal": {
			"comment": "Double-quote string literal",
			"name": "string.quoted.double.lorikeet",
			"begin": "b?\"",
			"end": "\"",
			"patterns": [
				{
					"include": "#escaped_character"
				}
			]
		}
	}
}

